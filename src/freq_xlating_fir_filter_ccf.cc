/* -*- c++ -*- */
/*
 * Copyright 2003,2010,2012 Free Software Foundation, Inc.
 *
 * This file is part of GNU Radio
 *
 * GNU Radio is free software; you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation; either version 3, or (at your option)
 * any later version.
 *
 * GNU Radio is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with GNU Radio; see the file COPYING.  If not, write to
 * the Free Software Foundation, Inc., 51 Franklin Street,
 * Boston, MA 02110-1301, USA.
 */

/*
 * WARNING: This file is automatically generated by cmake.
 * Any changes made to this file will be overwritten.
 */

#ifdef HAVE_CONFIG_H
#include "config.h"
#endif

#include "freq_xlating_fir_filter_ccf.h"
#include <gnuradio/io_signature.h>
#include <volk/volk.h>

typedef std::complex<float>  gr_complex;

freq_xlating_fir_filter_ccf::freq_xlating_fir_filter_ccf(int decimation,
	     const std::vector<float> &taps,
	     double center_freq,
	     double sampling_freq)
{
  std::cout << "[FREQ XLATING FIR FILTER] - Creating Freq. XLating FIR Filter" << std::endl;
  d_proto_taps = taps;
  d_center_freq = center_freq;
  d_sampling_freq = sampling_freq;
  d_updated = false;
  d_decimation = decimation;

  std::vector<gr_complex> dummy_taps;
  d_composite_fir = new fir_filter_ccc(decimation, dummy_taps);

  // set_history(d_proto_taps.size());
  build_composite_fir();
}

freq_xlating_fir_filter_ccf::~freq_xlating_fir_filter_ccf()
{
  delete d_composite_fir;
}

void
freq_xlating_fir_filter_ccf::build_composite_fir()
{
  std::vector<gr_complex> ctaps(d_proto_taps.size());

  // The basic principle of this block is to perform:
  //    x(t) -> (mult by -fwT0) -> LPF -> decim -> y(t)
  // We switch things up here to:
  //    x(t) -> BPF -> decim -> (mult by fwT0*decim) -> y(t)
  // The BPF is the baseband filter (LPF) moved up to the
  // center frequency fwT0. We then apply a derotator
  // with -fwT0 to downshift the signal to baseband.

  float fwT0 = 2 * M_PI * d_center_freq / d_sampling_freq;
  for(unsigned int i = 0; i < d_proto_taps.size(); i++) {
    ctaps[i] = d_proto_taps[i] * exp(gr_complex(0, i * fwT0));
  }

  d_composite_fir->set_taps(ctaps);
  d_r.set_phase_incr(exp(gr_complex(0, -fwT0 * d_decimation)));
}

void
freq_xlating_fir_filter_ccf::set_center_freq(double center_freq)
{
  d_center_freq = center_freq;
  d_updated = true;
}

double
freq_xlating_fir_filter_ccf::center_freq() const
{
  return d_center_freq;
}

void
freq_xlating_fir_filter_ccf::set_taps(const std::vector<float> &taps)
{
  d_proto_taps = taps;
  d_updated = true;
}

std::vector<float>
freq_xlating_fir_filter_ccf::taps() const
{
  return d_proto_taps;
}

void 
freq_xlating_fir_filter_ccf::work(const gr_complex * in, gr_complex * out, int noutput_items)
{
  // rebuild composite FIR if the center freq has changed - Removed part of the code from here
  // since the PyLoRa implementation does not encompass changing the center frequency on the fly
  unsigned j = 0;
  for (int i = 0; i < noutput_items; i++){
    out[i] = d_r.rotate(d_composite_fir->filter(&in[j]));
    j += d_decimation;
  }
}